{
    "providerProfiles": {
        "currentApiConfigName": "opensource-qwen-code",
        "apiConfigs": {
            "qwen-coder": {
                "diffEnabled": true,
                "todoListEnabled": true,
                "fuzzyMatchThreshold": 1,
                "rateLimitSeconds": 0,
                "consecutiveMistakeLimit": 3,
                "openRouterApiKey": "<OPENROUTER_API_KEY>",
                "openRouterModelId": "qwen/qwen3-coder",
                "openRouterSpecificProvider": "DeepInfra",
                "apiProvider": "openrouter",
                "id": "lzg00wh4yah"
            }
        },
        "modeApiConfigs": {
            "architect": "lzg00wh4yah",
            "code": "lzg00wh4yah",
            "ask": "lzg00wh4yah",
            "debug": "lzg00wh4yah",
            "orchestrator": "lzg00wh4yah"
        },
        "migrations": {
            "rateLimitSecondsMigrated": true,
            "diffSettingsMigrated": true,
            "openAiHeadersMigrated": true,
            "consecutiveMistakeLimitMigrated": true,
            "todoListEnabledMigrated": true
        }
    },
    "globalSettings": {
        "lastShownAnnouncementId": "jul-29-2025-3-25-0",
        "customInstructions": "<SYSTEM_PROMPT>",
        "condensingApiConfigId": "x5vgoxvf87",
        "customCondensingPrompt": "",
        "autoApprovalEnabled": true,
        "alwaysAllowReadOnly": true,
        "alwaysAllowReadOnlyOutsideWorkspace": false,
        "alwaysAllowWrite": true,
        "alwaysAllowWriteOutsideWorkspace": false,
        "alwaysAllowWriteProtected": false,
        "writeDelayMs": 1000,
        "alwaysAllowBrowser": true,
        "alwaysApproveResubmit": true,
        "requestDelaySeconds": 5,
        "alwaysAllowMcp": true,
        "alwaysAllowModeSwitch": true,
        "alwaysAllowSubtasks": true,
        "alwaysAllowExecute": true,
        "alwaysAllowFollowupQuestions": false,
        "followupAutoApproveTimeoutMs": 60000,
        "alwaysAllowUpdateTodoList": true,
        "allowedCommands": [
            "npm install",
            "git log",
            "git diff",
            "git show",
            "pwd",
            "head",
            "tail",
            "g++",
            "which",
            "sudo apt install",
            "sudo apt update",
            "cmake",
            "make",
            "cd",
            "ls",
            "grep",
            "find"
        ],
        "deniedCommands": [],
        "autoCondenseContext": true,
        "autoCondenseContextPercent": 70,
        "maxConcurrentFileReads": 20,
        "includeDiagnosticMessages": true,
        "maxDiagnosticMessages": 50,
        "browserToolEnabled": true,
        "browserViewportSize": "900x600",
        "screenshotQuality": 75,
        "remoteBrowserEnabled": false,
        "enableCheckpoints": false,
        "ttsEnabled": false,
        "ttsSpeed": 1,
        "soundEnabled": true,
        "soundVolume": 0.5,
        "maxOpenTabsContext": 20,
        "maxWorkspaceFiles": 200,
        "showRooIgnoredFiles": true,
        "maxReadFileLine": 1000,
        "maxImageFileSize": 5,
        "maxTotalImageSize": 20,
        "terminalOutputLineLimit": 500,
        "terminalOutputCharacterLimit": 50000,
        "terminalShellIntegrationTimeout": 5000,
        "terminalShellIntegrationDisabled": false,
        "terminalCommandDelay": 0,
        "terminalPowershellCounter": false,
        "terminalZshClearEolMark": true,
        "terminalZshOhMy": false,
        "terminalZshP10k": false,
        "terminalZdotdir": false,
        "terminalCompressProgressBar": true,
        "rateLimitSeconds": 0,
        "diffEnabled": true,
        "fuzzyMatchThreshold": 1,
        "experiments": {
            "powerSteering": false,
            "multiFileApplyDiff": true,
            "preventFocusDisruption": false
        },
        "codebaseIndexModels": {
            "openai": {
                "text-embedding-3-small": {
                    "dimension": 1536
                },
                "text-embedding-3-large": {
                    "dimension": 3072
                },
                "text-embedding-ada-002": {
                    "dimension": 1536
                }
            },
            "ollama": {
                "nomic-embed-text": {
                    "dimension": 768
                },
                "nomic-embed-code": {
                    "dimension": 3584
                },
                "mxbai-embed-large": {
                    "dimension": 1024
                },
                "all-minilm": {
                    "dimension": 384
                }
            },
            "openai-compatible": {
                "text-embedding-3-small": {
                    "dimension": 1536
                },
                "text-embedding-3-large": {
                    "dimension": 3072
                },
                "text-embedding-ada-002": {
                    "dimension": 1536
                },
                "nomic-embed-code": {
                    "dimension": 3584
                }
            },
            "gemini": {
                "text-embedding-004": {
                    "dimension": 768
                },
                "gemini-embedding-001": {
                    "dimension": 3072
                }
            },
            "mistral": {
                "codestral-embed-2505": {
                    "dimension": 1536
                }
            }
        },
        "codebaseIndexConfig": {
            "codebaseIndexEnabled": false,
            "codebaseIndexQdrantUrl": "http://localhost:6333",
            "codebaseIndexEmbedderProvider": "openai",
            "codebaseIndexEmbedderBaseUrl": "",
            "codebaseIndexEmbedderModelId": ""
        },
        "language": "en",
        "telemetrySetting": "disabled",
        "mcpEnabled": true,
        "enableMcpServerCreation": true,
        "mode": "code",
        "customModes": [],
        "customModePrompts": {
            "orchestrator": {
                "customInstructions": "Your role is to coordinate complex workflows by delegating tasks to specialized modes. As an orchestrator, you should:\n\n1. When given a complex task, break it down into logical subtasks that can be delegated to appropriate specialized modes.\n\n2. For each subtask, use the `new_task` tool to delegate. Choose the most appropriate mode for the subtask's specific goal and provide comprehensive instructions in the `message` parameter. These instructions must include:\n    *   All necessary context from the parent task or previous subtasks required to complete the work.\n    *   A clearly defined scope, specifying exactly what the subtask should accomplish.\n    *   An explicit statement that the subtask should *only* perform the work outlined in these instructions and not deviate.\n    *   An instruction for the subtask to signal completion by using the `attempt_completion` tool, providing a concise yet thorough summary of the outcome in the `result` parameter, keeping in mind that this summary will be the source of truth used to keep track of what was completed on this project.\n    *   A statement that these specific instructions supersede any conflicting general instructions the subtask's mode might have.\n\n3. Track and manage the progress of all subtasks. When a subtask is completed, analyze its results and determine the next steps.\n\n4. Help the user understand how the different subtasks fit together in the overall workflow. Provide clear reasoning about why you're delegating specific tasks to specific modes.\n\n5. When all subtasks are completed, synthesize the results and provide a comprehensive overview of what was accomplished.\n\n6. Ask clarifying questions when necessary to better understand how to break down complex tasks effectively.\n\n7. Suggest improvements to the workflow based on the results of completed subtasks.\n\nUse subtasks to maintain clarity. If a request significantly shifts focus or requires a different expertise (mode), consider creating a subtask rather than overloading the current one."
            }
        },
        "customSupportPrompts": {},
        "profileThresholds": {},
        "hasOpenedModeSelector": true
    }
}